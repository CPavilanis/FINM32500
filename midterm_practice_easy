#!/bin/python3

import math
import os
import random
import re
import sys


#
# Complete the 'countDuplicate' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER_ARRAY numbers as parameter.
#

def countDuplicate(numbers):

    repeating = 0
    
    for i in range(0,2000): 
        if numbers.count(i) > 1:
            repeating = repeating + 1
        
    return repeating        
 ###########################
    
    #!/usr/bin/env python
class BSTreeNode:
    def __init__(self, node_value):
        self.value = node_value
        self.left = self.right = None

def _insert_node_into_binarysearchtree(node, data):
    if node == None:
        node = BSTreeNode(data)
    else:
        if (data <= node.value):
            node.left = _insert_node_into_binarysearchtree(node.left, data);
        else:
            node.right = _insert_node_into_binarysearchtree(node.right, data);
    return node

"""
class BSTreeNode:
    def __init__(self, node_value):
        self.value = node_value
        self.left = self.right = None
"""

def isPresent (root,val):
    tmp_root = root
    
    result = []
    
    while result == []:
        
        if val < tmp_root.value:
            if hasattr(tmp_root.left,'value'):
                tmp_root = tmp_root.left
            else:
                return 0
        elif val > tmp_root.value:
            if hasattr(tmp_root.right,'value'):
                tmp_root = tmp_root.right
            else:
                return 0
        else:
            return 1
